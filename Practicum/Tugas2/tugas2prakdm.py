# -*- coding: utf-8 -*-
"""Tugas2PrakDM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROzK27dVSPH3-HvaEmkyaHRlOmcLfdFk

1. Import Library yang dibutuhkan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""2. Deskripsikan dataset dan tampilkan data data teratas"""

social_data = pd.read_csv("social.csv")
social_data.drop("Purchased",axis=1,inplace=True)

social_data.info()

social_data.head()

"""3. Tampilkan grafik elbow method dan pilih nilai K terbaik"""

# We can use a heatmap to check correlation between the variables.
corr = social_data.corr()
plt.figure(figsize=(8,8))
sns.heatmap(corr,cbar=True,square=True,fmt='.1f',annot=True,cmap='Reds')

# Which gender shops more?
plt.figure(figsize=(10,10))
sns.countplot(x="Gender", data=social_data)

# People of what ages shop more?
plt.figure(figsize=(16,10))
sns.countplot(x="Age", data=social_data)

# Is there really no relationship between Age and Estimated Salary?
plt.figure(figsize=(20,8))
sns.barplot(x='Age',y='EstimatedSalary',data=social_data)

social_data

# For our model, we can choose whatever variables we think are relevant or necessary, we needn't choose all.
# I'm going to choose age, annual income and spending score columns for my clustering model.
X = social_data.iloc[:,[2,3]].values
X

wcss = []
for i in range(1,11): # It will find wcss value for different number of clusters (for 1 cluster, for 2...until 10 clusters) and put it in our list
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=50)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
wcss

# elbow graph
sns.set()
plt.plot(range(1,11),wcss)
plt.xlabel("Number of clusters")
plt.ylabel("WCSS value")
plt.show()

"""4. Train Model"""

kmeans = KMeans(n_clusters = 3, init = 'k-means++',random_state = 0)

# we need a label for each datapoint relative to their clusters (will be split into 5 clusters and each will be labelled 0-4)
y = kmeans.fit_predict(X)

X[y==0,1]

"""6. Visualisasikan Cluster"""

#visulaizing the clusters  
plt.scatter(X[y == 0, 0], X[y == 0, 1], s = 100, c = 'green', label = 'Cluster 1') #for first cluster  
plt.scatter(X[y == 1, 0], X[y == 1, 1], s = 100, c = 'blue', label = 'Cluster 2') #for second cluster  
plt.scatter(X[y== 2, 0], X[y == 2, 1], s = 100, c = 'red', label = 'Cluster 3') #for third cluster    
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroid')   
plt.title('Clusters of customers')  
plt.xlabel('Age')  
plt.ylabel('Estimated Salary')  
plt.legend()  
plt.show()